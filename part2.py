# -*- coding: utf-8 -*-
"""part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lG0q7nlEjn3poEQjSspONRYBa1pNKcY4
"""

import pandas as pd

df = pd.read_csv('car_price_dataset.csv')

def descriptive_stats(sample, field):
    stats = {
        'Count': sample[field].count(),
        'Mean': sample[field].mean(),
        'Standard Deviation': sample[field].std(),
        'Minimum': sample[field].min(),
        '25th Percentile': sample[field].quantile(0.25),
        'Median': sample[field].median(),
        '75th Percentile': sample[field].quantile(0.75),
        'Maximum': sample[field].max()
    }
    return pd.Series(stats)

random_sample = df.sample(n=150, random_state=42)
random_stats = descriptive_stats(random_sample, 'Price')
print("Random Sample Descriptive Statistics:\n", random_stats)

#Filter condition we used Mileage < 100000
filtered_df = df[df['Mileage'] < 100000]

step = max(len(filtered_df) // 150, 1)
systematic_sample = filtered_df.iloc[::step].head(150)


systematic_stats = descriptive_stats(systematic_sample, 'Price')
print(systematic_stats)

# Get descriptive stats for the full dataset
price_stats = descriptive_stats(df, 'Price')

print("Descriptive Statistics for Car Price (Full Dataset):\n")
print(price_stats)

import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('seaborn-v0_8-muted')
sns.set_palette('muted')
sns.set_context('notebook')

# SCATTER PLOT
plt.figure(figsize=(8, 5))
plt.scatter(df['Mileage'], df['Price'], alpha=0.5, color='teal')
plt.title("Scatter Plot: Mileage vs Price")
plt.xlabel("Mileage (km)")
plt.ylabel("Price ($)")
plt.grid(True)
plt.tight_layout()
plt.show()

# b. BOX PLOT: Price
plt.figure(figsize=(6, 4))
sns.boxplot(y=df['Price'], color='lightblue')
plt.title("Box Plot of Car Prices")
plt.ylabel("Price ($)")
plt.tight_layout()
plt.show()

# c. HISTOGRAM: Price Distribution
plt.figure(figsize=(8, 5))
plt.hist(df['Price'], bins=30, color='skyblue', edgecolor='black')
plt.title("Histogram of Car Prices")
plt.xlabel("Price ($)")
plt.ylabel("Frequency")
plt.grid(True)
plt.tight_layout()
plt.show()

# d. HEAT MAP: Correlation Matrix
plt.figure(figsize=(10, 6))
corr_matrix = df.corr(numeric_only=True)
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Heatmap of Numerical Feature Correlations")
plt.tight_layout()
plt.show()

import pandas as pd
from scipy.stats import pearsonr, spearmanr, chi2_contingency

df_clean = df[['Mileage', 'Price']].dropna()

pearson_corr, pearson_p = pearsonr(df_clean['Mileage'], df_clean['Price'])

spearman_corr, spearman_p = spearmanr(df_clean['Mileage'], df_clean['Price'])

print("Pearson Correlation between Mileage and Price:")
print(f"Correlation Coefficient: {pearson_corr:.4f}, P-value: {pearson_p:.4e}")

print("\n Spearman Correlation between Mileage and Price:")
print(f"Correlation Coefficient: {spearman_corr:.4f}, P-value: {spearman_p:.4e}")

df = df[['Fuel_Type', 'Price']].dropna()

# Step 2: Create a categorical version of 'Price' into 'Low' and 'High' based on median
df['Price_Group'] = pd.qcut(df['Price'], q=2, labels=["Low", "High"])

contingency_table = pd.crosstab(df['Fuel_Type'], df['Price_Group'])

chi2_stat, p_value, dof, expected = chi2_contingency(contingency_table)

# Step 5: Output results
print("Contingency Table:")
print(contingency_table)

print("\nChi-Square Test Results:")
print(f"Chi2 Statistic: {chi2_stat:.4f}")
print(f"Degrees of Freedom: {dof}")
print(f"P-value: {p_value:.4f}")

import numpy as np
from scipy import stats
#Get dataset mean from the full dataset
dataset_mean = df['Price'].mean()

sample_size = 150
sample_data = df['Price'].sample(n=sample_size, random_state=42)


t_stat, p_value = stats.ttest_1samp(sample_data, dataset_mean)

#Output the results
print(f"Dataset Mean (Full Dataset): {dataset_mean:,.2f}")
print(f"Sample Mean: {sample_data.mean():,.2f}")
print(f"T-Statistic: {t_stat:.4f}")
print(f"P-Value: {p_value:.4f}")